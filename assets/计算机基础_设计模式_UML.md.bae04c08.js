import{_ as e,o,c as a,S as i}from"./chunks/framework.b12503b9.js";const g=JSON.parse('{"title":"UML科普文，掌握14种UML图！","description":"","frontmatter":{},"headers":[],"relativePath":"计算机基础/设计模式/UML.md","filePath":"计算机基础/设计模式/UML.md"}'),t={name:"计算机基础/设计模式/UML.md"},l=i('<h1 id="uml科普文-掌握14种uml图" tabindex="-1">UML科普文，掌握14种UML图！ <a class="header-anchor" href="#uml科普文-掌握14种uml图" aria-label="Permalink to &quot;UML科普文，掌握14种UML图！&quot;">​</a></h1><h2 id="什么是uml" tabindex="-1">什么是UML？ <a class="header-anchor" href="#什么是uml" aria-label="Permalink to &quot;什么是UML？&quot;">​</a></h2><p><code>UML</code>是<code>Unified Model Language</code>的缩写，中文是<code>统一建模语言</code>，是由一整套图表组成的标准化建模语言。</p><h2 id="为什么要用uml" tabindex="-1">为什么要用UML？ <a class="header-anchor" href="#为什么要用uml" aria-label="Permalink to &quot;为什么要用UML？&quot;">​</a></h2><p>通过使用UML使得在软件开发之前， 对整个软件设计有更好的可读性，可理解性，从而降低开发风险。同时，也能方便各个开发人员之间的交流。</p><p>UML提供了极富表达能力的建模语言，可以让软件开发过程中的不同人员分别得到自己感兴趣的信息。</p><p><code>Page-Jones</code> 在《Fundamental Object-Oriented Design in UML》 一书中总结了UML的主要目的，如下：</p><ol><li>为用户提供现成的、有表现力的可视化建模语言，以便他们开发和交换有意义的模型。</li><li>为核心概念提供可扩展性 (Extensibility) 和特殊化 (Specialization) 机制。</li><li>独立于特定的编程语言和开发过程。</li><li>为了解建模语言提供一个正式的基础。</li><li>鼓励面向对象工具市场的发展。</li><li>支持更高层次的开发概念，如协作，框架，模式和组件。</li><li>整合最佳的工作方法 (Best Practices)。</li></ol><h2 id="uml图有哪些" tabindex="-1">UML图有哪些？ <a class="header-anchor" href="#uml图有哪些" aria-label="Permalink to &quot;UML图有哪些？&quot;">​</a></h2><ul><li>UML图分为结构图和行为图。</li><li>结构图分为类图、轮廓图、组件图、组合结构图、对象图、部署图、包图。</li><li>行为图又分活动图、用例图、状态机图和交互图。</li><li>交互图又分为序列图、时序图、通讯图、交互概览图。</li></ul><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121009877.png" alt="image-20220812100858776" style="zoom:67%;"><h2 id="uml图概览" tabindex="-1">UML图概览 <a class="header-anchor" href="#uml图概览" aria-label="Permalink to &quot;UML图概览&quot;">​</a></h2><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121012639.png" alt="image-20220812101252561" style="zoom:67%;"><h2 id="什么是类图⭐⭐" tabindex="-1">什么是类图⭐⭐ <a class="header-anchor" href="#什么是类图⭐⭐" aria-label="Permalink to &quot;什么是类图⭐⭐&quot;">​</a></h2><p>【概念】 类图是一切面向对象方法的核心建模工具。类图描述了系统中对象的类型以及它们之间存在的各种静态关系。</p><p>【目的】用来表示类、接口以及它们之间的静态结构和关系。</p><blockquote><p>在类图中，常见的有以下几种关系。</p></blockquote><h3 id="泛化-generalization" tabindex="-1">泛化（Generalization） <a class="header-anchor" href="#泛化-generalization" aria-label="Permalink to &quot;泛化（Generalization）&quot;">​</a></h3><ul><li>【泛化关系】是一种继承关系，表示子类继承父类的所有特征和行为。</li><li>【箭头指向】带三角箭头的实线，箭头指向父类。</li></ul><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121013245.png" alt="image-20220812101321213" style="zoom:67%;"><h3 id="实现-realization" tabindex="-1">实现（Realization） <a class="header-anchor" href="#实现-realization" aria-label="Permalink to &quot;实现（Realization）&quot;">​</a></h3><ul><li>【实现关系】是一种类与接口的关系，表示类是接口所有特征和行为的实现。</li><li>【箭头指向】带三角箭头的虚线，箭头指向接口。</li></ul><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121013219.png" alt="image-20220812101332182" style="zoom:67%;"><h3 id="关联-association" tabindex="-1">关联（Association） <a class="header-anchor" href="#关联-association" aria-label="Permalink to &quot;关联（Association）&quot;">​</a></h3><ul><li>【关联关系】是一种拥有关系，它使得一个类知道另一个类的属性和方法。</li><li>【代码体现】成员变量</li><li>【箭头指向】带普通箭头的实线，指向被拥有者。双向的关联可以有两个箭头，或者没有箭头。单向的关联有一个箭头。</li></ul><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121013547.png" alt="image-20220812101342517" style="zoom:67%;"><blockquote><p>自己买的车，想什么时候开就开。但是车是车，人是人，没有整体与部分的关系。</p></blockquote><h3 id="聚合-aggregation" tabindex="-1">聚合（Aggregation） <a class="header-anchor" href="#聚合-aggregation" aria-label="Permalink to &quot;聚合（Aggregation）&quot;">​</a></h3><ul><li>【聚合关系】是一种整体与部分的关系。且部分可以离开整体而单独存在。聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。</li><li>【代码体现】成员变量</li><li>【箭头指向】带空心菱形的实线，空心菱形指向整体。</li></ul><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121016670.png" alt="image-20220812101641639" style="zoom:67%;"><blockquote><p>电脑有键盘才能输入信息，电脑是整体，键盘是部分，键盘也可以离开电脑，单纯的拿去敲。所以是聚合。</p></blockquote><h3 id="组合-composition" tabindex="-1">组合（Composition） <a class="header-anchor" href="#组合-composition" aria-label="Permalink to &quot;组合（Composition）&quot;">​</a></h3><ul><li>【组合关系】是一种整体与部分的关系。但部分不能离开整体而单独存在，组合关系是关联关系的一种，是比聚合关系还要强的关系。</li><li>【代码体现】成员变量</li><li>【箭头指向】带实心菱形和普通箭头的实线，实心菱形指向整体。</li></ul><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121016548.png" alt="image-20220812101656518" style="zoom:67%;"><blockquote><p>鸟是整体，翅膀是部分。鸟死了，翅膀也就不能飞了。所以是组合。我们再看一下，下面的一组经典的聚合组合关系的例子。</p></blockquote><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121017492.png" alt="image-20220812101713454" style="zoom:67%;"><blockquote><p>一个公司拥有多个部门，公司和部门之间是组合关系，公司破产了，部门就不复存在了。部门和员工是聚合关系，部门被裁掉，员工就换下家了。</p></blockquote><h3 id="依赖-dependency" tabindex="-1">依赖（Dependency） <a class="header-anchor" href="#依赖-dependency" aria-label="Permalink to &quot;依赖（Dependency）&quot;">​</a></h3><ul><li>【依赖关系】是一种使用关系，即一个类的实现需要另一个类的协助。</li><li>【箭头指向】带普通箭头的虚线，普通箭头指向被使用者。</li></ul><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121017118.png" alt="image-20220812101731086" style="zoom:67%;"><blockquote><p>老司机只管开车，车是谁的不重要，给什么车开什么车。</p></blockquote><h2 id="什么是组件图" tabindex="-1">什么是组件图？ <a class="header-anchor" href="#什么是组件图" aria-label="Permalink to &quot;什么是组件图？&quot;">​</a></h2><p>【概念】描绘了系统中组件提供的、需要的接口、端口等，以及它们之间的关系。</p><p>【目的】用来展示各个组件之间的依赖关系。</p><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121017045.png" alt="image-20220812101751999" style="zoom:67%;"><blockquote><p>订单系统组件依赖于客户资源库和库存系统组件。中间的虚线箭头表示依赖关系。另外两个符号，表示组件连接器，一个提供接口，一个需要接口。</p></blockquote><h2 id="什么是部署图" tabindex="-1">什么是部署图？ <a class="header-anchor" href="#什么是部署图" aria-label="Permalink to &quot;什么是部署图？&quot;">​</a></h2><p>【概念】描述了系统内部的软件如何分布在不同的节点上。</p><p>【目的】用来表示软件和硬件的映射关系。</p><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121045283.png" alt="image-20220812104554228" style="zoom:50%;"><blockquote><p>图中简单的表示，不同机器上面部署的不同软件。</p></blockquote><h2 id="什么是对象图" tabindex="-1">什么是对象图？ <a class="header-anchor" href="#什么是对象图" aria-label="Permalink to &quot;什么是对象图？&quot;">​</a></h2><p>【概念】对象图是类图的一个实例，是系统在某个时间点的详细状态的快照。</p><p>【目的】用来表示两个或者多个对象之间在某一时刻之间的关系。</p><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121045166.png" alt="image-20220812104537115" style="zoom:67%;"><blockquote><p>图中就是描述的，某时间点<code>bat</code>这个公司有一个研发部，一个销售部，两个部门只有一个人<code>iisheng</code>。</p></blockquote><h2 id="什么是包图" tabindex="-1">什么是包图？ <a class="header-anchor" href="#什么是包图" aria-label="Permalink to &quot;什么是包图？&quot;">​</a></h2><p>【概念】描绘了系统在包层面上的结构设计。</p><p>【目的】用来表示包和包之间的依赖关系。</p><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121045978.png" alt="image-20220812104507901" style="zoom:50%;"><ul><li>《Use》关系表示使用依赖，<code>Web Shopping</code>依赖<code>Payment</code></li><li>《Merge》关系表示合并，<code>Web Shopping</code>合并了<code>Shopping Cart</code>就拥有了<code>Shopping Cart</code>的功能</li><li>《Access》关系表示私有引入，比如代码中的指定包名类名</li><li>《Import》关系表示公共引入，比如Java中的<code>import</code>之后，就可以直接使用<code>import</code>包中的类了。</li></ul><h2 id="什么是组合结构图" tabindex="-1">什么是组合结构图？ <a class="header-anchor" href="#什么是组合结构图" aria-label="Permalink to &quot;什么是组合结构图？&quot;">​</a></h2><p>【概念】描述了一个&quot;组合结构&quot;的内部结构，以及他们之间的关系。这个&quot;组合结构&quot;可以是系统的一部分，或者一个整体。</p><p>【目的】用来表示系统中逻辑上的&quot;组合结构&quot;。</p><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121044722.png" alt="image-20220812104440660" style="zoom:50%;"><blockquote><p>图中描述了<code>Car</code>是由车轴连接着的两个前面轮子、两个后面轮子，和引擎组合的。</p></blockquote><h2 id="什么是轮廓图" tabindex="-1">什么是轮廓图？ <a class="header-anchor" href="#什么是轮廓图" aria-label="Permalink to &quot;什么是轮廓图？&quot;">​</a></h2><p>【概念】轮廓图提供了一种通用的扩展机制，用于为特定域和平台定制UML模型。</p><p>【目的】用于在特定领域中构建UML模型。</p><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121044096.png" alt="image-20220812104418035" style="zoom:67%;"><blockquote><p>图中我们定义了一个简易的<code>EJB</code>的概要图。<code>Bean</code>是从<code>Component</code>扩展来的。<code>Entity Bean</code>和<code>Session Bean</code>继承了<code>Bean</code>。<code>EJB</code>拥有<code>Remote</code>和<code>Home</code>接口，和<code>JAR</code>包。</p></blockquote><h2 id="什么是用例图" tabindex="-1">什么是用例图？ <a class="header-anchor" href="#什么是用例图" aria-label="Permalink to &quot;什么是用例图？&quot;">​</a></h2><p>【概念】用例图是指由参与者、用例，边界以及它们之间的关系构成的用于描述系统功能的视图。</p><p>【目的】用来描述整个系统的功能。</p><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121043369.png" alt="image-20220812104356307" style="zoom:50%;"><p>用例图中包含以下三种关系：</p><ul><li>包含关系使用符号《include》，想要查看订单列表，前提是需要先登录。</li><li>扩展关系使用符号《extend》，基于查询订单列表的功能，可以增加一个导出数据的功能</li><li>泛化关系，子用例继承父用例所有结构、行为和关系。</li></ul><h2 id="什么是活动图" tabindex="-1">什么是活动图？ <a class="header-anchor" href="#什么是活动图" aria-label="Permalink to &quot;什么是活动图？&quot;">​</a></h2><p>【概念】描述了具体业务用例的实现流程。</p><p>【目的】用来表示用例实现的工作流程。</p><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121043507.png" alt="image-20220812104321473" style="zoom:67%;"><blockquote><p>图中简单描述了，从开始到登录到查看订单列表，或者登录失败直接结束。</p></blockquote><h2 id="什么是状态机图" tabindex="-1">什么是状态机图？ <a class="header-anchor" href="#什么是状态机图" aria-label="Permalink to &quot;什么是状态机图？&quot;">​</a></h2><p>【概念】状态机图对一个单独对象的行为建模，指明对象在它的整个生命周期里，响应不同事件时，执行相关事件的顺序。</p><p>【目的】用来表示指定对象，在整个生命周期，响应不同事件的不同状态。</p><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121042000.png" alt="image-20220812104252953" style="zoom:50%;"><blockquote><p>图中描述了，门在其生命周期内所经历的状态。</p></blockquote><h2 id="什么是序列图" tabindex="-1">什么是序列图？ <a class="header-anchor" href="#什么是序列图" aria-label="Permalink to &quot;什么是序列图？&quot;">​</a></h2><p>【概念】序列图根据时间序列展示对象如何进行协作。它展示了在用例的特定场景中，对象如何与其他对象交互。</p><p>【目的】通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。</p><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121042536.png" alt="image-20220812104231461" style="zoom:67%;"><blockquote><p>图中展示的是支付宝条码支付场景的序列图。其中，<code>loop</code>是循环，<code>alt</code>是选择，序列图的其他关系这里就不介绍</p></blockquote><h2 id="什么是通讯图" tabindex="-1">什么是通讯图？ <a class="header-anchor" href="#什么是通讯图" aria-label="Permalink to &quot;什么是通讯图？&quot;">​</a></h2><p>【概念】描述了收发消息的对象的组织关系，强调对象之间的合作关系而不是时间顺序。</p><p>【目的】用来显示不同对象的关系。</p><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121037574.png" alt="image-20220812103708506" style="zoom:67%;"><blockquote><p>图中展示了一个线上书店的通讯图，方框和小人表示生命线，不同生命线之间可以传递消息，消息前面的数字可以表达序列顺序。</p></blockquote><h2 id="什么是交互概览图" tabindex="-1">什么是交互概览图？ <a class="header-anchor" href="#什么是交互概览图" aria-label="Permalink to &quot;什么是交互概览图？&quot;">​</a></h2><p>【概念】交互概览图与活动图类似，但是它的节点是交互图。</p><p>【目的】提供了控制流的概述。</p><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121036634.png" alt="image-20220812103641570" style="zoom:67%;"><blockquote><p>图中表示一个调度系统的交互概览图，跟活动图很像。其中<code>sd</code>的框代表具体的交互流程，<code>ref</code>框代表使用交互。</p></blockquote><h2 id="什么是时序图" tabindex="-1">什么是时序图？ <a class="header-anchor" href="#什么是时序图" aria-label="Permalink to &quot;什么是时序图？&quot;">​</a></h2><p>【概念】时序图被用来显示随时间变化，一个或多个元素的值或状态的更改。也显示时控事件之间的交互和管理它们的时间和期限约束。</p><p>【目的】用来表示元素状态或者值随时间的变化而变化的视图。</p><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2022.8.30/202208121030306.png" alt="image-20220812103029249" style="zoom:67%;"><blockquote><p>图中展示了老年痴呆病人随着时间的变化病情的变化。</p></blockquote><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>学习UML，我们没必要纠结比如像聚合关系是带箭头还是不带箭头，这样的问题。更重要的是UML图所给我们带来的画图思想，让我们画UML图或者其他图能让其他人更好的理解我们的设计思想。</p><p>当然，你要是明确知道带箭头或者不带箭头哪个是错误的，欢迎留言告诉我。</p><h1 id="类图⭐" tabindex="-1">类图⭐ <a class="header-anchor" href="#类图⭐" aria-label="Permalink to &quot;类图⭐&quot;">​</a></h1><blockquote><p>统一建模语言（Unified Modeling Language，UML）是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。UML 从目标系统的不同角度出发，定义了<strong>用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图</strong>等 9 种图。</p></blockquote><h2 id="类图概述" tabindex="-1">类图概述 <a class="header-anchor" href="#类图概述" aria-label="Permalink to &quot;类图概述&quot;">​</a></h2><blockquote><p>类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p></blockquote><blockquote><p>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</p></blockquote><h2 id="类的表示方式" tabindex="-1">类的表示方式 <a class="header-anchor" href="#类的表示方式" aria-label="Permalink to &quot;类的表示方式&quot;">​</a></h2><blockquote><p>在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个属性，以及work()方法。</p></blockquote><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2023.11.17/image-20230725094917872.png" alt="image-20230725094917872" style="zoom:80%;"><blockquote><p>属性/方法名称前加的加号和减号表示这个属性/方法的可见性，UML类图中表示可见性的符号有三种</p></blockquote><blockquote><p>+：表示public</p><p>-：表示private</p><p>#：表示protected</p></blockquote><blockquote><p>属性的完整表示方式是： <strong>可见性 名称 ：类型</strong> <strong>[ =</strong> <strong>缺省值]</strong></p></blockquote><blockquote><p>方法的完整表示方式是： <strong>可见性 名称(参数列表) [： 返回类型]</strong></p></blockquote><p>注意：</p><blockquote><ol><li>中括号中的内容表示是可选的</li><li>也有将类型放在变量名前面，返回值类型放在方法名前面</li></ol></blockquote><p>**举个栗子：**上图Demo类定义了三个方法：</p><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2023.11.17/image-20230725095154773.png" alt="image-20230725095154773" style="zoom:80%;"><blockquote><ul><li>method()方法：修饰符为public，没有参数，没有返回值。、</li><li>method1()方法：修饰符为private，没有参数，返回值类型为String。</li><li>method2()方法：修饰符为protected，接收两个参数，第一个参数类型为int，第二个参数类型为String，返回值类型是int。</li></ul></blockquote><h2 id="类关系表示⭐" tabindex="-1">类关系表示⭐ <a class="header-anchor" href="#类关系表示⭐" aria-label="Permalink to &quot;类关系表示⭐&quot;">​</a></h2><h3 id="关联关系" tabindex="-1">关联关系 <a class="header-anchor" href="#关联关系" aria-label="Permalink to &quot;关联关系&quot;">​</a></h3><blockquote><p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。关联又可以分为单向关联，双向关联，自关联。</p></blockquote><h4 id="单向关联" tabindex="-1">单向关联 <a class="header-anchor" href="#单向关联" aria-label="Permalink to &quot;单向关联&quot;">​</a></h4><blockquote><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。</p></blockquote><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2023.11.17/image-20230725095303333.png" alt="image-20230725095303333" style="zoom:80%;"><h4 id="双向关联" tabindex="-1">双向关联 <a class="header-anchor" href="#双向关联" aria-label="Permalink to &quot;双向关联&quot;">​</a></h4><blockquote><p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。在UML类图中，双向关联用一个不带箭头的直线表示。上图中在Customer类中维护一个List&lt;Product&gt;，表示一个顾客可以购买多个商品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。</p></blockquote><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2023.11.17/image-20230725095325630.png" alt="image-20230725095325630" style="zoom:80%;"><h4 id="自关联" tabindex="-1">自关联 <a class="header-anchor" href="#自关联" aria-label="Permalink to &quot;自关联&quot;">​</a></h4><blockquote><p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。</p></blockquote><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2023.11.17/image-20230725095347565.png" alt="image-20230725095347565" style="zoom:80%;"><h3 id="聚合关系" tabindex="-1">聚合关系 <a class="header-anchor" href="#聚合关系" aria-label="Permalink to &quot;聚合关系&quot;">​</a></h3><blockquote><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p></blockquote><blockquote><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。大学和教师的关系图：</p></blockquote><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2023.11.17/image-20230725095418693.png" alt="image-20230725095418693" style="zoom:80%;"><h3 id="组合关系" tabindex="-1">组合关系 <a class="header-anchor" href="#组合关系" aria-label="Permalink to &quot;组合关系&quot;">​</a></h3><blockquote><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p></blockquote><blockquote><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。头和嘴的关系图：</p></blockquote><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2023.11.17/image-20230725095440695.png" alt="image-20230725095440695" style="zoom:80%;"><h3 id="依赖关系⭐" tabindex="-1">依赖关系⭐ <a class="header-anchor" href="#依赖关系⭐" aria-label="Permalink to &quot;依赖关系⭐&quot;">​</a></h3><blockquote><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。下图所示是司机和汽车的关系图，司机驾驶汽车：</p></blockquote><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2023.11.17/image-20230725095539372.png" alt="image-20230725095539372" style="zoom:80%;"><h4 id="继承关系" tabindex="-1">继承关系 <a class="header-anchor" href="#继承关系" aria-label="Permalink to &quot;继承关系&quot;">​</a></h4><blockquote><p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系。在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下图所示：</p></blockquote><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2023.11.17/image-20230725095600005.png" alt="image-20230725095600005" style="zoom:80%;"><h3 id="实现关系" tabindex="-1">实现关系 <a class="header-anchor" href="#实现关系" aria-label="Permalink to &quot;实现关系&quot;">​</a></h3><blockquote><p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如图 9 所示。</p></blockquote><img src="https://edu-8673.oss-cn-beijing.aliyuncs.com/img2023.11.17/image-20230725095626412.png" alt="image-20230725095626412" style="zoom:80%;">',156),c=[l];function n(s,r,u,p,m,d){return o(),a("div",null,c)}const b=e(t,[["render",n]]);export{g as __pageData,b as default};
